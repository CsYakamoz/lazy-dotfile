# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="powerlevel10k/powerlevel10k"

# plugins {{{ #
plugins=(
  git
  sudo
  jump
  colored-man-pages

  zsh-autosuggestions
  F-Sy-H
  zsh-autopair
  fzf-tab
  git-open
)
# }}} plugins #

source $ZSH/oh-my-zsh.sh

# alias {{{ #
alias j="jump"
alias cp="cp -i"
alias tailf="tail -f"
alias gw="git worktree"
alias gwr="git worktree remove"
alias gopen="git-open"
# }}} alias

# export {{{ #
export PATH=$PATH:~/go/bin
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# INFO: https://asdf-vm.com/guide/getting-started.html
export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
# }}} export

# git-helper {{{ #
function is_in_git() {
  git rev-parse --is-inside-work-tree > /dev/null 2>&1
}

function git_repository_root() {
  git rev-parse --show-toplevel
}
# }}} git-helper #

# func esgwt {{{ #
# easily switch git worktree, require: fzf
esgwt() {
  if ! is_in_git; then
    echo 'not a git repository, ignore...'
    return
  fi

  local worktree_list=""
  worktree_list=$(git worktree list)

  local count=""
  count=$(echo -e "${worktree_list}" | wc -l | awk '{print $1}')
  if [[ "${count}" == 1 ]]; then
    echo 'only one worktree, ignore...'
    return
  fi

  local loop_var=""

  # lcp -> longest common parent (dir)
  local lcp=""
  while read -r loop_var; do
    if [[ -z "${lcp}" ]]; then
      lcp="${loop_var}"
    else
      while [[ ! "${loop_var}" =~ ^${lcp} ]]; do
        lcp=$(dirname "${lcp}")
      done
    fi
  done < <(echo -e "${worktree_list}" | awk '{print $1}')

  if [[ "${lcp}" != "/" ]]; then
    lcp+="/"
  fi

  local current_dir=""
  current_dir=$(git_repository_root)

  local list=""
  local header=""
  while read -r loop_var; do
    local suffix="${loop_var#"${lcp}"}"
    if [[ "${loop_var}" == "${current_dir}"* ]]; then
      header="${suffix}"
    else
      if [[ -n "${list}" ]]; then
        list+="\n"
      fi
      list+="${suffix}"
    fi
  done < <(echo -e "${worktree_list}" | awk '{print $1, $3}')
  list="${header}\n$(echo -e "${list}" | sort)"

  local chosen=""
  chosen=$(echo -e "${list}" | fzf -1 --header-lines=1 -q "$1" --prompt 'Worktree> ')
  if [[ -z "${chosen}" ]]; then
    return
  fi

  local target="${lcp}/${chosen% *}"
  cd "${target}" || return
}

_esgwt() {
  COMPREPLY=()

  if ! is_in_git; then
    return 0
  fi

  local list
  list=$(git worktree list | awk '{print $1}' | while read -r dir; do basename "${dir}"; done)
  COMPREPLY=( "$(compgen -W "${list}")" )
  return 0
}

complete -F _esgwt esgwt
# }}} func esgwt #

# func gwa {{{ #
gwa() {
  if ! is_in_git; then
    echo 'not a git repository, ignore...'
    return 0
  fi

  if [[ $# -lt 1 ]]; then
    echo -e "usage: gwa <branch-name>"
    return
  fi

  local choice branch_type=("feature" "fix" "refactor" "docs" "chore" "style" "test" "script")
  select choice in "${branch_type[@]}"; do
    if [[ -z "${choice}" ]]; then
      echo -e "invalid choice, nothing to do..."
      return
    fi
    break;
  done

  local git_root="" cmd
  git_root=$(git_repository_root)
  cmd="git worktree add ../${1} -b ${choice}/v$(date +"%Y%m%d")-${1}"
  echo -e "git root: ${git_root}"
  echo -e "cmd is '$cmd'"

  local answer
  read -r "?[gwa] Really run this cmd? [Y/n]" answer
  case "$answer" in
    y|Y)
      (cd "${git_root}" && eval "$cmd")
      ;;
    *)
      ;;
  esac
}
# }}} func gwa #

# fzf completion
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# vim: set sw=2 ts=2 sts=2 et foldmarker={{{,}}} foldmethod=marker foldlevel=0:
